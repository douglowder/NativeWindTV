diff --git a/node_modules/react-native/Libraries/Components/Pressable/Pressable.js b/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
index 4110569..228eaed 100644
--- a/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
+++ b/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
@@ -14,6 +14,7 @@ import type {
   MouseEvent,
   PressEvent,
 } from '../../Types/CoreEventTypes';
+import type {TVParallaxPropertiesType} from '../TV/TVViewPropTypes';
 import type {
   AccessibilityActionEvent,
   AccessibilityActionInfo,
@@ -26,10 +27,9 @@ import {PressabilityDebugView} from '../../Pressability/PressabilityDebug';
 import usePressability from '../../Pressability/usePressability';
 import {type RectOrSize} from '../../StyleSheet/Rect';
 import useMergeRefs from '../../Utilities/useMergeRefs';
-import View from '../View/View';
-import type {TVParallaxPropertiesType} from '../TV/TVViewPropTypes';
-import {tvFocusEventHandler} from '../TV/TVFocusEventHandler';
 import tagForComponentOrHandle from '../TV/tagForComponentOrHandle';
+import {tvFocusEventHandler} from '../TV/TVFocusEventHandler';
+import View from '../View/View';
 import useAndroidRippleForView, {
   type RippleConfig,
 } from './useAndroidRippleForView';
@@ -392,52 +392,19 @@ function Pressable(
   // $FlowFixMe[incompatible-call]
   const eventHandlers = usePressability(config);
 
-  const pressableTVFocusEventHandler = React.useCallback(
-    (evt: any) => {
-      if (isTVSelectable !== false || focusable !== false) {
-        // $FlowFixMe[prop-missing]
-        if (evt?.eventType === 'focus') {
-          shouldUpdatePressed && setFocused(true);
-          onFocus && onFocus(evt);
-          // $FlowFixMe[prop-missing]
-        } else if (evt.eventType === 'blur') {
-          onBlur && onBlur(evt);
-          shouldUpdatePressed && setFocused(false);
-        }
-      }
-      // $FlowFixMe[prop-missing]
-      if (evt.eventType === 'select') {
-        // $FlowFixMe[incompatible-exact]
-        onPress && onPress(evt);
-      }
-      // $FlowFixMe[prop-missing]
-      if (evt.eventType === 'longSelect') {
-        // $FlowFixMe[incompatible-exact]
-        onLongPress && onLongPress(evt);
-      }
-    },
-    [
-      onBlur,
-      onFocus,
-      onLongPress,
-      onPress,
-      focusable,
-      isTVSelectable,
-      shouldUpdatePressed,
-    ],
-  );
-
   React.useEffect(() => {
     if (!tvFocusEventHandler) {
       return;
     }
+    const pressableTVFocusEventHandler = (evt: any) =>
+      eventHandlers?.onTVEvent(evt);
     // $FlowFixMe[prop-missing]
     const viewTag = tagForComponentOrHandle(viewRef?.current);
     tvFocusEventHandler.register(viewTag, pressableTVFocusEventHandler);
     return () => {
       tvFocusEventHandler.unregister(viewTag);
     };
-  }, [pressableTVFocusEventHandler, viewRef]);
+  }, [eventHandlers, viewRef]);
 
   return (
     <View
diff --git a/node_modules/react-native/Libraries/Components/TV/TVViewPropTypes.js b/node_modules/react-native/Libraries/Components/TV/TVViewPropTypes.js
index 67ca717..1143729 100644
--- a/node_modules/react-native/Libraries/Components/TV/TVViewPropTypes.js
+++ b/node_modules/react-native/Libraries/Components/TV/TVViewPropTypes.js
@@ -85,4 +85,5 @@ export type TVViewProps = $ReadOnly<{|
   enabled?: boolean,
   autoFocus?: boolean,
   safePadding?: string | null,
+  onTVEvent?: (event: any) => void,
 |}>;
diff --git a/node_modules/react-native/Libraries/Pressability/Pressability.js b/node_modules/react-native/Libraries/Pressability/Pressability.js
index 776a28f..60c497d 100644
--- a/node_modules/react-native/Libraries/Pressability/Pressability.js
+++ b/node_modules/react-native/Libraries/Pressability/Pressability.js
@@ -131,6 +131,11 @@ export type PressabilityConfig = $ReadOnly<{|
    */
   onPressOut?: ?(event: PressEvent) => mixed,
 
+  /**
+   * Called when a TV event is passed to the config.
+   */
+  onTVEvent?: ?(event: any) => void,
+
   /**
    * Whether to prevent any other native components from becoming responder
    * while this pressable is responder.
@@ -152,6 +157,7 @@ export type EventHandlers = $ReadOnly<{|
   onResponderTerminate: (event: PressEvent) => void,
   onResponderTerminationRequest: () => boolean,
   onStartShouldSetResponder: () => boolean,
+  onTVEvent: (event: any) => void,
 |}>;
 
 type TouchState =
@@ -430,6 +436,35 @@ export default class Pressability {
   }
 
   _createEventHandlers(): EventHandlers {
+    const tvEventHandlers = {
+      onTVEvent: (evt: any): void => {
+        if (this._config.disabled !== false) {
+          // $FlowFixMe[prop-missing]
+          if (evt?.eventType === 'focus') {
+            const {onFocus} = this._config;
+            onFocus && onFocus(evt);
+            // $FlowFixMe[prop-missing]
+          } else if (evt.eventType === 'blur') {
+            const {onBlur} = this._config;
+            onBlur && onBlur(evt);
+          } else if (evt.eventType === 'select') {
+            const {onPress, onPressIn, onPressOut} = this._config;
+            // $FlowFixMe[incompatible-exact]
+            onPressIn && onPressIn(evt);
+            onPress && onPress(evt);
+            setTimeout(() => {
+              onPressOut && onPressOut(evt);
+            }, this._config.minPressDuration ?? DEFAULT_MIN_PRESS_DURATION);
+          } else if (evt.eventType === 'longSelect') {
+            const {onLongPress, onPressIn, onPressOut} = this._config;
+            onLongPress && onLongPress(evt);
+            evt?.eventKeyAction === 0
+              ? onPressIn && onPressIn(evt)
+              : onPressOut && onPressOut(evt);
+          }
+        }
+      },
+    };
     const focusEventHandlers = {
       onBlur: (event: BlurEvent): void => {
         const {onBlur} = this._config;
@@ -610,6 +645,7 @@ export default class Pressability {
         };
       }
       return {
+        ...tvEventHandlers,
         ...focusEventHandlers,
         ...responderEventHandlers,
         ...hoverPointerEvents,
@@ -662,6 +698,7 @@ export default class Pressability {
               },
             };
       return {
+        ...tvEventHandlers,
         ...focusEventHandlers,
         ...responderEventHandlers,
         ...mouseEventHandlers,
